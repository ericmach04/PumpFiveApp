"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _Dot = _interopRequireDefault(require("../Dot"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const styles = _reactNative.StyleSheet.create({
  activeDate: {
    backgroundColor: '#3b5998'
  },
  container: {
    alignItems: 'center',
    backgroundColor: 'white',
    flex: 1,
    marginVertical: 5,
    paddingVertical: 10
  },
  endDate: {
    borderBottomRightRadius: 60,
    borderTopRightRadius: 60
  },
  startDate: {
    borderBottomLeftRadius: 60,
    borderTopLeftRadius: 60
  }
});

const NonTouchableDay = /*#__PURE__*/_react.default.memo(props => {
  const {
    isMonthDate,
    isActive,
    isOutOfRange,
    isStartDate,
    isEndDate,
    theme,
    date,
    isToday
  } = props;
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, theme.dayContainerStyle, theme.nonTouchableDayContainerStyle, isToday && !isActive ? theme.todayContainerStyle : {}, isActive ? styles.activeDate : {}, isActive ? theme.activeDayContainerStyle : {}, isOutOfRange ? theme.dayOutOfRangeContainerStyle : {}, isEndDate ? styles.endDate : {}, isEndDate ? theme.endDateContainerStyle : {}, isStartDate ? styles.startDate : {}, isStartDate ? theme.startDateContainerStyle : {}]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [{
      color: '#d3d3d3'
    }, theme.nonTouchableDayTextStyle, isMonthDate ? theme.nonTouchableLastMonthDayTextStyle : {}, isToday ? theme.todayTextStyle : {}, isOutOfRange ? theme.dayOutOfRangeTextStyle : {}]
  }, date.getDate()));
}, (prevProps, nextProps) => {
  return prevProps.isActive === nextProps.isActive && prevProps.isVisible === nextProps.isVisible && prevProps.isStartDate === nextProps.isStartDate && prevProps.isEndDate === nextProps.isEndDate;
});

const Day = /*#__PURE__*/_react.default.memo(props => {
  const {
    item: {
      date,
      isVisible,
      isActive,
      isStartDate,
      isEndDate,
      isMonthDate,
      isOutOfRange,
      isToday,
      isHidden
    },
    dots = [],
    theme
  } = props;

  if (isHidden) {
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [styles.container]
    });
  }

  if (!isVisible) {
    return /*#__PURE__*/_react.default.createElement(NonTouchableDay, {
      isActive: isActive,
      date: date,
      theme: theme,
      isMonthDate: isMonthDate,
      isOutOfRange: isOutOfRange,
      isStartDate: isStartDate,
      isEndDate: isEndDate,
      isVisible: isVisible,
      isToday: isToday
    });
  } // Should render a maximum of 3 dots


  const finalDots = dots.slice(0, 3);
  return /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    style: [styles.container, theme.dayContainerStyle, isToday && !isActive ? theme.todayContainerStyle : {}, isActive ? styles.activeDate : {}, isActive ? theme.activeDayContainerStyle : {}, isStartDate ? styles.startDate : {}, isStartDate ? theme.startDateContainerStyle : {}, isEndDate ? styles.endDate : {}, isEndDate ? theme.endDateContainerStyle : {}],
    onPress: () => props.onPress(props.item.date)
  }, props.renderDayContent ? props.renderDayContent(props.item) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [{
      color: isActive ? 'white' : 'black'
    }, theme.dayTextStyle, isToday ? theme.todayTextStyle : {}, isActive ? theme.activeDayTextStyle : {}]
  }, date.getDate()), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      position: 'absolute',
      bottom: 3,
      flexDirection: 'row'
    }
  }, finalDots.map((d, i) => /*#__PURE__*/_react.default.createElement(_Dot.default, _extends({
    key: i.toString(),
    active: isActive
  }, d, {
    style: {
      marginLeft: i === 0 ? 0 : 2
    },
    dotContainerStyle: theme.dotContainerStyle
  }))))));
}, (prevProps, nextProps) => {
  return prevProps.item.isActive === nextProps.item.isActive && prevProps.item.isVisible === nextProps.item.isVisible && prevProps.item.isStartDate === nextProps.item.isStartDate && prevProps.item.isEndDate === nextProps.item.isEndDate && prevProps.renderDayContent === nextProps.renderDayContent;
});

var _default = Day;
exports.default = _default;
//# sourceMappingURL=index.js.map