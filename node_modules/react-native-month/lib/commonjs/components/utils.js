"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMonthDays = getMonthDays;
exports.areEqual = areEqual;

var _date = require("../utils/date");

var _validations = require("../utils/validations");

const MONDAY_FIRST = [6, 0, 1, 2, 3, 4, 5];

function dayShouldBeActive(date, startDate, endDate, firstDayOfMonth, lastDayOfMonth) {
  if (date > lastDayOfMonth) {
    return endDate > lastDayOfMonth && startDate <= lastDayOfMonth;
  }

  return startDate < firstDayOfMonth && endDate >= firstDayOfMonth;
}

function getMonthDays(month, year, firstDayMonday, disableRange, disabledDays, disableOffsetDays, startDate, endDate, minDate, maxDate) {
  if (minDate instanceof Date) minDate.setHours(0, 0, 0, 0);
  if (maxDate instanceof Date) maxDate.setHours(0, 0, 0, 0);
  if (startDate instanceof Date) startDate.setHours(0, 0, 0, 0);
  if (endDate instanceof Date) endDate.setHours(0, 0, 0, 0);
  const firstMonthDay = new Date(year, month, 1);
  const lastMonthDay = new Date(year, month + 1, 0);
  const daysToAdd = (0, _date.getNumberOfDaysInMonth)(month, year);
  const days = [];
  const startWeekOffset = firstDayMonday ? MONDAY_FIRST[firstMonthDay.getDay()] : firstMonthDay.getDay();
  const daysToCompleteRows = (startWeekOffset + daysToAdd) % 7;
  const lastRowNextMonthDays = daysToCompleteRows ? 7 - daysToCompleteRows : 0;

  for (let i = -startWeekOffset; i < daysToAdd + lastRowNextMonthDays; i++) {
    const date = (0, _date.addDays)(firstMonthDay, i);
    const day = date.getDate();
    const month = date.getMonth();
    const fullDay = day < 10 ? `0${day}` : day.toString();
    const fullMonth = month < 10 ? `0${month + 1}` : (month + 1).toString();
    const id = `${date.getFullYear()}-${fullMonth}-${fullDay}`;
    let isOnSelectableRange = !minDate && !maxDate;
    isOnSelectableRange = (!minDate || minDate && date >= minDate) && (!maxDate || maxDate && date <= maxDate);
    const isOutOfRange = !!(minDate && date < minDate || maxDate && date > maxDate);
    const isMonthDate = i >= 0 && i < daysToAdd;
    let isStartDate = false;
    let isEndDate = false;
    let isActive = false;

    if (endDate && startDate && !disableRange) {
      isStartDate = isMonthDate && (0, _validations.sameDate)(date, startDate);
      isEndDate = isMonthDate && (0, _validations.sameDate)(date, endDate);

      if (!isMonthDate) {
        isActive = dayShouldBeActive(date, startDate, endDate, firstMonthDay, lastMonthDay);
      } else {
        isActive = date >= startDate && date <= endDate;
      }
    } else if (isMonthDate && startDate && (0, _validations.sameDate)(date, startDate)) {
      isStartDate = true;
      isEndDate = true;
      isActive = true;
    }

    const today = new Date();
    const isToday = day === today.getDate() && month === today.getMonth() && year === today.getFullYear();
    days.push({
      key: `${month}-${id}`,
      id: id,
      date,
      isToday,
      isMonthDate,
      isActive,
      isStartDate,
      isEndDate,
      isOutOfRange,
      isVisible: isOnSelectableRange && isMonthDate && !disabledDays[id],
      isHidden: disableOffsetDays && !isMonthDate
    });
  }

  return days;
}

function areEqual(prevProps, nextProps) {
  return prevProps.month === nextProps.month && prevProps.year === nextProps.year && prevProps.locale === nextProps.locale && Array.isArray(prevProps.dayNames) === Array.isArray(nextProps.dayNames) && prevProps.showWeekdays === nextProps.showWeekdays && prevProps.disableRange === nextProps.disableRange && prevProps.disableOffsetDays === nextProps.disableOffsetDays && prevProps.firstDayMonday === nextProps.firstDayMonday && !(0, _validations.changeMarkedDays)(prevProps.markedDays, nextProps.markedDays) && !(0, _validations.changedDate)(prevProps.startDate, nextProps.startDate) && !(0, _validations.changedDate)(prevProps.endDate, nextProps.endDate) && !(0, _validations.changedDate)(prevProps.minDate, nextProps.minDate) && !(0, _validations.changedDate)(prevProps.maxDate, nextProps.maxDate);
}
//# sourceMappingURL=utils.js.map