{"version":3,"sources":["index.tsx"],"names":["React","memo","props","month","year","onPress","locale","dayNames","showWeekdays","disabledDays","disableRange","disableOffsetDays","firstDayMonday","startDate","endDate","minDate","maxDate","markedDays","theme","renderDayContent","DAY_NAMES","Array","isArray","length","days","weeks","push","splice","map","week","index","String","flexDirection","day","key","id","dots","areEqual"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;4BAEeA,eAAMC,IAAN,CAAwBC,KAAD,IAAuB;AAC3D,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,MAAM,GAAG,IAJL;AAKJC,IAAAA,QALI;AAMJC,IAAAA,YANI;AAOJC,IAAAA,YAAY,GAAG,EAPX;AAQJC,IAAAA,YAAY,GAAG,KARX;AASJC,IAAAA,iBAAiB,GAAG,KAThB;AAUJC,IAAAA,cAAc,GAAG,IAVb;AAWJC,IAAAA,SAXI;AAYJC,IAAAA,OAZI;AAaJC,IAAAA,OAbI;AAcJC,IAAAA,OAdI;AAeJC,IAAAA,UAAU,GAAG,EAfT;AAgBJC,IAAAA,KAAK,GAAG,EAhBJ;AAiBJC,IAAAA;AAjBI,MAkBFjB,KAlBJ;AAoBA,QAAMkB,SAAS,GACbC,KAAK,CAACC,OAAN,CAAcf,QAAd,KAA2BA,QAAQ,CAACgB,MAAT,KAAoB,CAA/C,GACIhB,QADJ,GAEI,uBAAYD,MAAZ,EAAoBM,cAApB,CAHN;AAKA,QAAMY,IAAI,GAAG,yBACXrB,KADW,EAEXC,IAFW,EAGXQ,cAHW,EAIXF,YAJW,EAKXD,YALW,EAMXE,iBANW,EAOXE,SAPW,EAQXC,OARW,EASXC,OATW,EAUXC,OAVW,CAAb;AAaA,QAAMS,KAAK,GAAG,EAAd;;AAEA,SAAOD,IAAI,CAACD,MAAZ,EAAoB;AAClBE,IAAAA,KAAK,CAACC,IAAN,CAAWF,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAX;AACD;;AAED,sBACE,4DACGnB,YAAY,iBAAI,6BAAC,iBAAD;AAAU,IAAA,IAAI,EAAEY,SAAhB;AAA2B,IAAA,KAAK,EAAEF;AAAlC,IADnB,EAEGO,KAAK,CAACG,GAAN,CAAU,CAACC,IAAD,EAAkBC,KAAlB,kBACT,6BAAC,iBAAD;AAAM,IAAA,GAAG,EAAEC,MAAM,CAACD,KAAD,CAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEE,MAAAA,aAAa,EAAE;AAAjB;AAAjC,KACGH,IAAI,CAACD,GAAL,CAAUK,GAAD,iBACR,6BAAC,YAAD;AACE,IAAA,GAAG,EAAEA,GAAG,CAACC,GADX;AAEE,IAAA,IAAI,EAAED,GAFR;AAGE,IAAA,IAAI,EAAEhB,UAAU,CAACgB,GAAG,CAACE,EAAL,CAAV,GAAqBlB,UAAU,CAACgB,GAAG,CAACE,EAAL,CAAV,CAAmBC,IAAxC,GAA+C,EAHvD;AAIE,IAAA,OAAO,EAAE/B,OAJX;AAKE,IAAA,KAAK,EAAEa,KALT;AAME,IAAA,gBAAgB,EAAEC;AANpB,IADD,CADH,CADD,CAFH,CADF;AAmBD,CAhEc,EAgEZkB,eAhEY,C","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport { DayType, MonthProps } from '../../types';\nimport { getDayNames } from '../../utils/date';\nimport { getMonthDays, areEqual } from '../utils';\nimport WeekDays from '../WeekDays';\nimport Day from '../Day';\n\nexport default React.memo<MonthProps>((props: MonthProps) => {\n  const {\n    month,\n    year,\n    onPress,\n    locale = 'en',\n    dayNames,\n    showWeekdays,\n    disabledDays = {},\n    disableRange = false,\n    disableOffsetDays = false,\n    firstDayMonday = true,\n    startDate,\n    endDate,\n    minDate,\n    maxDate,\n    markedDays = {},\n    theme = {},\n    renderDayContent,\n  } = props;\n\n  const DAY_NAMES =\n    Array.isArray(dayNames) && dayNames.length === 7\n      ? dayNames\n      : getDayNames(locale, firstDayMonday);\n\n  const days = getMonthDays(\n    month,\n    year,\n    firstDayMonday,\n    disableRange,\n    disabledDays,\n    disableOffsetDays,\n    startDate,\n    endDate,\n    minDate,\n    maxDate\n  );\n\n  const weeks = [];\n\n  while (days.length) {\n    weeks.push(days.splice(0, 7));\n  }\n\n  return (\n    <>\n      {showWeekdays && <WeekDays days={DAY_NAMES} theme={theme} />}\n      {weeks.map((week: DayType[], index: number) => (\n        <View key={String(index)} style={{ flexDirection: 'row' }}>\n          {week.map((day: DayType) => (\n            <Day\n              key={day.key}\n              item={day}\n              dots={markedDays[day.id] ? markedDays[day.id].dots : []}\n              onPress={onPress}\n              theme={theme}\n              renderDayContent={renderDayContent}\n            />\n          ))}\n        </View>\n      ))}\n    </>\n  );\n}, areEqual);\n"]}