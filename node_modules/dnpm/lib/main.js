'use strict';

var getCurrentPackage = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!currentPackage) {
              _context.next = 2;
              break;
            }

            return _context.abrupt('return', currentPackage);

          case 2:
            if (_fs2.default.existsSync(CURRENT_PACKAGE_PATH)) {
              _context.next = 4;
              break;
            }

            throw new Error('current package.json not found');

          case 4:
            currentPackage = _fs2.default.readFileSync(CURRENT_PACKAGE_PATH, 'utf8');
            currentPackage = JSON.parse(currentPackage);
            return _context.abrupt('return', currentPackage);

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function getCurrentPackage() {
    return ref.apply(this, arguments);
  };
}();

var saveCurrentPackage = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
    var str;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            str = JSON.stringify(currentPackage, null, 2) + '\n';

            _fs2.default.writeFileSync(CURRENT_PACKAGE_PATH, str);

          case 2:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function saveCurrentPackage() {
    return ref.apply(this, arguments);
  };
}();

var getLocalPackages = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
    var dirs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, dir, paths, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, path, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _dir, _path, pkg;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!localPackages) {
              _context3.next = 2;
              break;
            }

            return _context3.abrupt('return', localPackages);

          case 2:
            dirs = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context3.prev = 6;
            _iterator = argv.local[Symbol.iterator]();

          case 8:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context3.next = 42;
              break;
            }

            dir = _step.value;
            paths = _fs2.default.readdirSync(dir);
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            _context3.prev = 14;
            _iterator3 = paths[Symbol.iterator]();

          case 16:
            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
              _context3.next = 25;
              break;
            }

            path = _step3.value;

            path = _path3.default.resolve(dir, path);

            if (_fs2.default.statSync(path).isDirectory()) {
              _context3.next = 21;
              break;
            }

            return _context3.abrupt('continue', 22);

          case 21:
            if (!dirs.includes(path)) dirs.push(path);

          case 22:
            _iteratorNormalCompletion3 = true;
            _context3.next = 16;
            break;

          case 25:
            _context3.next = 31;
            break;

          case 27:
            _context3.prev = 27;
            _context3.t0 = _context3['catch'](14);
            _didIteratorError3 = true;
            _iteratorError3 = _context3.t0;

          case 31:
            _context3.prev = 31;
            _context3.prev = 32;

            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }

          case 34:
            _context3.prev = 34;

            if (!_didIteratorError3) {
              _context3.next = 37;
              break;
            }

            throw _iteratorError3;

          case 37:
            return _context3.finish(34);

          case 38:
            return _context3.finish(31);

          case 39:
            _iteratorNormalCompletion = true;
            _context3.next = 8;
            break;

          case 42:
            _context3.next = 48;
            break;

          case 44:
            _context3.prev = 44;
            _context3.t1 = _context3['catch'](6);
            _didIteratorError = true;
            _iteratorError = _context3.t1;

          case 48:
            _context3.prev = 48;
            _context3.prev = 49;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 51:
            _context3.prev = 51;

            if (!_didIteratorError) {
              _context3.next = 54;
              break;
            }

            throw _iteratorError;

          case 54:
            return _context3.finish(51);

          case 55:
            return _context3.finish(48);

          case 56:

            localPackages = [];

            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context3.prev = 60;
            _iterator2 = dirs[Symbol.iterator]();

          case 62:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context3.next = 73;
              break;
            }

            _dir = _step2.value;
            _path = _path3.default.join(_dir, 'package.json');

            if (_fs2.default.existsSync(_path)) {
              _context3.next = 67;
              break;
            }

            return _context3.abrupt('continue', 70);

          case 67:
            pkg = _fs2.default.readFileSync(_path, 'utf8');

            pkg = JSON.parse(pkg);
            localPackages.push({ path: _dir, pkg: pkg });

          case 70:
            _iteratorNormalCompletion2 = true;
            _context3.next = 62;
            break;

          case 73:
            _context3.next = 79;
            break;

          case 75:
            _context3.prev = 75;
            _context3.t2 = _context3['catch'](60);
            _didIteratorError2 = true;
            _iteratorError2 = _context3.t2;

          case 79:
            _context3.prev = 79;
            _context3.prev = 80;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 82:
            _context3.prev = 82;

            if (!_didIteratorError2) {
              _context3.next = 85;
              break;
            }

            throw _iteratorError2;

          case 85:
            return _context3.finish(82);

          case 86:
            return _context3.finish(79);

          case 87:
            return _context3.abrupt('return', localPackages);

          case 88:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[6, 44, 48, 56], [14, 27, 31, 39], [32,, 34, 38], [49,, 51, 55], [60, 75, 79, 87], [80,, 82, 86]]);
  }));

  return function getLocalPackages() {
    return ref.apply(this, arguments);
  };
}();

var getLocalDependencies = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
    var currentPackage, getDependencies, dependencies, devDependencies, localDependencies, localPackages, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _loop, _iterator5, _step5;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            getDependencies = function getDependencies(dependencies) {
              var results = [];
              if (dependencies) {
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                  for (var _iterator4 = Object.keys(dependencies)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var name = _step4.value;

                    if (argv.packages.length && !argv.packages.includes(name)) continue;
                    var version = dependencies[name];
                    results.push({ name: name, version: version });
                  }
                } catch (err) {
                  _didIteratorError4 = true;
                  _iteratorError4 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                      _iterator4.return();
                    }
                  } finally {
                    if (_didIteratorError4) {
                      throw _iteratorError4;
                    }
                  }
                }
              }
              return results;
            };

            _context4.next = 3;
            return getCurrentPackage();

          case 3:
            currentPackage = _context4.sent;
            dependencies = getDependencies(currentPackage.dependencies);

            if (argv.dev) {
              devDependencies = getDependencies(currentPackage.devDependencies);

              dependencies = dependencies.concat(devDependencies);
            }

            localDependencies = [];
            _context4.next = 9;
            return getLocalPackages();

          case 9:
            localPackages = _context4.sent;
            _iteratorNormalCompletion5 = true;
            _didIteratorError5 = false;
            _iteratorError5 = undefined;
            _context4.prev = 13;

            _loop = function _loop() {
              var dependency = _step5.value;

              var localPackage = localPackages.find(function (localPackage) {
                if (localPackage.pkg.name !== dependency.name) return false;
                return _semver2.default.satisfies(localPackage.pkg.version, dependency.version);
              });
              if (localPackage) localDependencies.push(localPackage);
            };

            for (_iterator5 = dependencies[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              _loop();
            }

            _context4.next = 22;
            break;

          case 18:
            _context4.prev = 18;
            _context4.t0 = _context4['catch'](13);
            _didIteratorError5 = true;
            _iteratorError5 = _context4.t0;

          case 22:
            _context4.prev = 22;
            _context4.prev = 23;

            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }

          case 25:
            _context4.prev = 25;

            if (!_didIteratorError5) {
              _context4.next = 28;
              break;
            }

            throw _iteratorError5;

          case 28:
            return _context4.finish(25);

          case 29:
            return _context4.finish(22);

          case 30:
            return _context4.abrupt('return', localDependencies);

          case 31:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this, [[13, 18, 22, 30], [23,, 25, 29]]);
  }));

  return function getLocalDependencies() {
    return ref.apply(this, arguments);
  };
}();

var packageIsUpToDate = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(source, target) {
    var sourceContent, sourcePackage, targetPackagePath, targetPackage, sourceDependencies, targetDependencies, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, file, sourceModifiedTime, targetPath, targetStats, targetModifiedTime;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return fetchPackageContent(source);

          case 2:
            sourceContent = _context5.sent;
            sourcePackage = sourceContent.pkg;

            if (_fs2.default.existsSync(target)) {
              _context5.next = 6;
              break;
            }

            return _context5.abrupt('return', false);

          case 6:
            targetPackagePath = _path3.default.join(target, 'package.json');

            if (_fs2.default.existsSync(targetPackagePath)) {
              _context5.next = 9;
              break;
            }

            return _context5.abrupt('return', false);

          case 9:
            targetPackage = _fs2.default.readFileSync(targetPackagePath, 'utf8');

            targetPackage = JSON.parse(targetPackage);

            if (!(sourcePackage.version !== targetPackage.version)) {
              _context5.next = 13;
              break;
            }

            return _context5.abrupt('return', false);

          case 13:
            sourceDependencies = sourcePackage.dependencies || {};
            targetDependencies = targetPackage.dependencies || {};

            if ((0, _lodash2.default)(sourceDependencies, targetDependencies)) {
              _context5.next = 18;
              break;
            }

            if (argv.verbose) {
              console.log('Source and target dependencies are different');
              console.log('Source:', sourceDependencies);
              console.log('Target:', targetDependencies);
            }
            return _context5.abrupt('return', false);

          case 18:
            _iteratorNormalCompletion6 = true;
            _didIteratorError6 = false;
            _iteratorError6 = undefined;
            _context5.prev = 21;
            _iterator6 = sourceContent.files[Symbol.iterator]();

          case 23:
            if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
              _context5.next = 37;
              break;
            }

            file = _step6.value;
            sourceModifiedTime = file.modifiedTime;
            targetPath = _path3.default.join(target, file.path);

            if (_fs2.default.existsSync(targetPath)) {
              _context5.next = 30;
              break;
            }

            if (argv.verbose) {
              console.log('Missing target file: ' + targetPath);
            }
            return _context5.abrupt('return', false);

          case 30:
            targetStats = _fs2.default.statSync(targetPath);
            targetModifiedTime = targetStats.mtime;

            if (!(sourceModifiedTime.valueOf() !== targetModifiedTime.valueOf())) {
              _context5.next = 34;
              break;
            }

            return _context5.abrupt('return', false);

          case 34:
            _iteratorNormalCompletion6 = true;
            _context5.next = 23;
            break;

          case 37:
            _context5.next = 43;
            break;

          case 39:
            _context5.prev = 39;
            _context5.t0 = _context5['catch'](21);
            _didIteratorError6 = true;
            _iteratorError6 = _context5.t0;

          case 43:
            _context5.prev = 43;
            _context5.prev = 44;

            if (!_iteratorNormalCompletion6 && _iterator6.return) {
              _iterator6.return();
            }

          case 46:
            _context5.prev = 46;

            if (!_didIteratorError6) {
              _context5.next = 49;
              break;
            }

            throw _iteratorError6;

          case 49:
            return _context5.finish(46);

          case 50:
            return _context5.finish(43);

          case 51:
            return _context5.abrupt('return', true);

          case 52:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this, [[21, 39, 43, 51], [44,, 46, 50]]);
  }));

  return function packageIsUpToDate(_x, _x2) {
    return ref.apply(this, arguments);
  };
}();

var getOutdatedDependencies = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
    var outdatedDependencies, localDependencies, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, localDependency, a, b;

    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            outdatedDependencies = [];
            _context6.next = 3;
            return getLocalDependencies();

          case 3:
            localDependencies = _context6.sent;
            _iteratorNormalCompletion7 = true;
            _didIteratorError7 = false;
            _iteratorError7 = undefined;
            _context6.prev = 7;
            _iterator7 = localDependencies[Symbol.iterator]();

          case 9:
            if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
              _context6.next = 20;
              break;
            }

            localDependency = _step7.value;
            a = localDependency.path;
            b = _path3.default.resolve(WORKING_DIR, 'node_modules', localDependency.pkg.name);
            _context6.next = 15;
            return packageIsUpToDate(a, b);

          case 15:
            if (_context6.sent) {
              _context6.next = 17;
              break;
            }

            outdatedDependencies.push(localDependency);

          case 17:
            _iteratorNormalCompletion7 = true;
            _context6.next = 9;
            break;

          case 20:
            _context6.next = 26;
            break;

          case 22:
            _context6.prev = 22;
            _context6.t0 = _context6['catch'](7);
            _didIteratorError7 = true;
            _iteratorError7 = _context6.t0;

          case 26:
            _context6.prev = 26;
            _context6.prev = 27;

            if (!_iteratorNormalCompletion7 && _iterator7.return) {
              _iterator7.return();
            }

          case 29:
            _context6.prev = 29;

            if (!_didIteratorError7) {
              _context6.next = 32;
              break;
            }

            throw _iteratorError7;

          case 32:
            return _context6.finish(29);

          case 33:
            return _context6.finish(26);

          case 34:
            return _context6.abrupt('return', outdatedDependencies);

          case 35:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this, [[7, 22, 26, 34], [27,, 29, 33]]);
  }));

  return function getOutdatedDependencies() {
    return ref.apply(this, arguments);
  };
}();

var installDependencies = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(dependencies) {
    var paths, cmd;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            paths = dependencies.map(function (dependency) {
              return _path3.default.relative('.', dependency.path);
            });

            paths = paths.map(function (path) {
              return '"' + path + '"';
            });
            paths = paths.join(' ');
            cmd = 'npm install ' + paths;

            if (argv.verbose) {
              console.log(cmd);
            }
            _child_process2.default.execSync(cmd, { stdio: 'inherit' });

          case 6:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));

  return function installDependencies(_x3) {
    return ref.apply(this, arguments);
  };
}();

var saveVersionNumbers = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(dependencies) {
    var currentPackage, modified, setVersionNumber, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, _dependency;

    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            setVersionNumber = function setVersionNumber(dependencies, _ref) {
              var name = _ref.name;
              var version = _ref.version;

              var currentVersion = dependencies[name];
              if (!currentVersion) return;
              version = '^' + version;
              if (currentVersion === version) return;
              dependencies[name] = version;
              modified = true;
            };

            _context8.next = 3;
            return getCurrentPackage();

          case 3:
            currentPackage = _context8.sent;
            modified = false;
            _iteratorNormalCompletion8 = true;
            _didIteratorError8 = false;
            _iteratorError8 = undefined;
            _context8.prev = 8;


            for (_iterator8 = dependencies[Symbol.iterator](); !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
              _dependency = _step8.value;

              setVersionNumber(currentPackage.dependencies, _dependency.pkg);
              if (argv.dev) {
                setVersionNumber(currentPackage.devDependencies, _dependency.pkg);
              }
            }

            _context8.next = 16;
            break;

          case 12:
            _context8.prev = 12;
            _context8.t0 = _context8['catch'](8);
            _didIteratorError8 = true;
            _iteratorError8 = _context8.t0;

          case 16:
            _context8.prev = 16;
            _context8.prev = 17;

            if (!_iteratorNormalCompletion8 && _iterator8.return) {
              _iterator8.return();
            }

          case 19:
            _context8.prev = 19;

            if (!_didIteratorError8) {
              _context8.next = 22;
              break;
            }

            throw _iteratorError8;

          case 22:
            return _context8.finish(19);

          case 23:
            return _context8.finish(16);

          case 24:
            if (!modified) {
              _context8.next = 27;
              break;
            }

            _context8.next = 27;
            return saveCurrentPackage();

          case 27:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, this, [[8, 12, 16, 24], [17,, 19, 23]]);
  }));

  return function saveVersionNumbers(_x4) {
    return ref.apply(this, arguments);
  };
}();

var update = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee9() {
    var outdatedDependencies;
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return getOutdatedDependencies();

          case 2:
            outdatedDependencies = _context9.sent;

            if (outdatedDependencies.length) {
              _context9.next = 5;
              break;
            }

            return _context9.abrupt('return');

          case 5:
            _context9.next = 7;
            return installDependencies(outdatedDependencies);

          case 7:
            if (!argv.save) {
              _context9.next = 10;
              break;
            }

            _context9.next = 10;
            return saveVersionNumbers(outdatedDependencies);

          case 10:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));

  return function update() {
    return ref.apply(this, arguments);
  };
}();

var run = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee10() {
    return regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (!(argv.command === 'update')) {
              _context10.next = 5;
              break;
            }

            _context10.next = 3;
            return update();

          case 3:
            _context10.next = 6;
            break;

          case 5:
            console.error('The command "' + argv.command + '" is unkwnown');

          case 6:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, this);
  }));

  return function run() {
    return ref.apply(this, arguments);
  };
}();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path2 = require('path');

var _path3 = _interopRequireDefault(_path2);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _lodash = require('lodash.isequal');

var _lodash2 = _interopRequireDefault(_lodash);

var _fstreamNpm = require('fstream-npm');

var _fstreamNpm2 = _interopRequireDefault(_fstreamNpm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

var argv = _yargs2.default.usage('Usage: dnmp <command> [packages...]').demand(1).command('update', 'Update all (or listed) packages').alias('l', 'local').default('l', '../').describe('l', 'Directory containing your local packages').boolean('S').alias('S', 'save').describe('S', 'Save version numbers in package.json').boolean('dev').describe('dev', 'Include devDependencies packages').boolean('v').alias('v', 'verbose').describe('v', 'Make the output more verbose').help('h').alias('h', 'help').argv;

argv.command = argv._[0];
argv.packages = argv._.slice(1);

if (!Array.isArray(argv.local)) argv.local = [argv.local];

var WORKING_DIR = '.';
var CURRENT_PACKAGE_PATH = _path3.default.join(WORKING_DIR, 'package.json');

var currentPackage = void 0;

var localPackages = void 0;

function fetchPackageContent(path) {
  return new Promise(function (resolve, reject) {
    var files = [];
    var pkg = void 0;
    (0, _fstreamNpm2.default)({ path: path }).on('entry', function (entry) {
      var props = entry.props;
      if (props.basename !== 'package.json' && props.basename !== '.gitignore' && props.basename !== '.npmignore') {
        var filePath = _path3.default.relative(path, props.path);
        files.push({ path: filePath, modifiedTime: props.mtime });
      }
    }).on('package', function (obj) {
      pkg = obj;
    }).on('error', function (err) {
      reject(err);
    }).on('end', function () {
      resolve({ path: path, files: files, pkg: pkg });
    });
  });
}

run().catch(console.error.bind(console));